



##############         CREATING ndarrays       #####################

# We can convert a list data1 to array with numpy using array function
import numpy as np
data1 = [6, 7.5, 8, 0, 1]
arr1 = np.array(data1)
arr1    #Now it;s an array


data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)
arr2
arr2.ndim  #Dimensions of array
arr2.shape
arr1.dtype   #Checking the type of array. This is float
arr2.dtype   # This is integer



#In addition to np.array, there are a number of other functions for creating new arrays.
#As examples, zeros and ones create arrays of 0’s or 1’s, respectively, with a given length or shape.

np.zeros(10) #It will creat one-dimensional array of 10 zeroes array([0,0,0,0,0,0,0,0,0,0])

np.zeros((3, 6)) # 3 rows and 6 columns; all the values or elements will be zero only

# empty creates an array without initializing its values to random values; +ve and negative
np.empty((2, 3, 2))

# arange is an array-valued version of the built-in Python range function:
np.arange(15)  #It will create number from zero upto 14. Basically its range in numpy


# We can explicitly convert or cast an array from one dtype to another using ndarray’s astype method:
arr = np.array([1, 2, 3, 4, 5])
arr.dtype   # It's integer type

#We can convert it to float type using the astype() function
float_arr = arr.astype(np.float64)
float_arr.dtype


# If we cast some floating point numbers to be of integer dtype, the decimal part will be truncated
arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])
arr.astype(np.int32)  #Now it will be array([3, -1, -2, 0, 12, 10])

# Calling astype always creates a new array (a copy of the data), even if the new dtype is the same as the old dtype.


##########    Operations between Arrays and Scalars       #############################

# Any arithmetic operations between equal-size arrays applies the operation elementwise:
arr = np.array([[1., 2., 3.], [4., 5., 6.]])
arr * arr    #elements with same relative position will be multiplied
arr - arr

#Arithmetic operations with scalars are as you would expect, propagating the value to each element:
1 / arr   # 1 will be divided by each element



#########    Basic Indexing and Slicing        ###########################

arr = np.arange(10)
arr
arr[5:8]  #It will show array([5, 6, 7])
arr[5:8] = 12 #It will assign 12 at 5th, 6th and 7th positions (positions will start with zero) in the array

# Taking a slice of 5th to 8th (excluding 8th) position and filling its first (6th of array) position with 12345
arr_slice = arr[5:8]
arr_slice[1] = 12345
arr #Now it will have 12345 at the 5th position


arr_slice[:] = 64  #Putting 64 5th, 6th & 7th position
arr    #Now it will have 64 at 5th, 6th & 7th position (positiin will start with zero)


arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
arr2d[2]   #output will be array([7, 8, 9])

arr2d[0][2] #1st row and it's 3rd element or 2nd element (elements starting with zeroth position)

#It;s an 2*2*3 array
arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

arr3d[0] # it will produce a 2*3 array array([1,2,3],[4,5,6])

# Both scalar values and arrays can be assigned to arr3d[0]:
old_values = arr3d[0].copy()
arr3d[0] = 42
arr3d   #Output would be  array([[[42, 42, 42],[42, 42, 42]],[[ 7, 8, 9],[10, 11, 12]]])

arr3d[0] = old_values
arr3d     #Now output would be array([[[ 1, 2, 3],[ 4, 5, 6]],[[ 7, 8, 9],[10, 11, 12]]])


#Here column means taking entire axis, now taking 1st column only so out 
arr2d[:, :1]
#Outuput  array([[1],
 #               [4],
 #               [7]])



##########      BOOLEAN INDEXING       ######################

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
from numpy.random import randn
data = randn(7, 4)

#Selecting two of the three names to combine multiple boolean conditions, use boolean
#arithmetic operators like & (and) and | (or):
mask = (names == 'Bob') | (names == 'Will')
mask  #It will show   array([ True, False,  True,  True,  True, False, False], dtype=bool)


##########      Transposing Arrays and Swapping Axes       ######################

arr = np.arange(15).reshape((3, 5)) #Reshape makes 3 rows and 5 columns
arr  
arr.T  #Using T, we can transpose this array. Now it has 5 rows and 3 columns


# When doing matrix computations, you will do this very often, like for example computing
# the inner matrix product XTX using np.dot:
arr1 = np.random.randn(6, 3)
np.dot(arr1.T, arr1)


# For higher dimensional arrays, transpose will accept a tuple of axis numbers to permute
# the axes (for extra mind bending):
arr = np.arange(16).reshape((2, 2, 4))
arr
arr.transpose((1, 0, 2))


# Simple transposing with .T is just a special case of swapping axes. ndarray has the
# method swapaxes which takes a pair of axis numbers:
arr.swapaxes(1, 2)

# swapaxes similarly returns a view on the data without making a copy.



#######  Universal Functions: Fast Element-wise Array Functions    ###################

#Getting the square root and exponential of an array
arr = np.arange(10)
np.sqrt(arr)
np.exp(arr)

#GEtting the element-wise maximum value
from numpy.random import randn
x = randn(8)
y = randn(8)
np.maximum(x, y)


#######  Data Processing Using Arrays    ###################

# Using NumPy arrays enables you to express many kinds of data processing tasks as
# concise array expressions that might otherwise require writing loops. This practice of
# replacing explicit loops with array expressions is commonly referred to as vectorization.


# suppose we wished to evaluate the function sqrt(x^2 + y^2)
# across a regular grid of values. The np.meshgrid function takes two 1D arrays and produces
# two 2D matrices corresponding to all pairs of (x, y) in the two arrays
points = np.arange(-5, 5, 0.01) # 1000 equally spaced points
xs, ys = np.meshgrid(points, points)
ys
import matplotlib.pyplot as plt
z = np.sqrt(xs ** 2 + ys ** 2)
z
plt.imshow(z, cmap=plt.cm.gray); plt.colorbar()
plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a grid of values")


from numpy.random import randn
arr = randn(4, 4)
arr
np.where(arr > 0, 2, -2)  #replace all positive values with 2 and all negative values with -2.
np.where(arr > 0, 2, arr) # replace only positive values with 2




#######  Mathematical and Statistical Methods    ###################

import numpy as np
arr = np.random.randn(5, 4) # normally-distributed data
arr
#Aggregations like mean, median, sd etccan either be used by calling the array instance method or using 
# the top level NumPy function
arr.mean()
np.mean(arr)
arr.sum()


arr.mean(axis=1) # Taking the mean around rows
arr.mean(0)  #Taking the mean around columns

# Other methods like cumsum and cumprod do not aggregate, instead producing an array of the intermediate results:
arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
arr.cumsum(0)
arr.cumprod(1)



###Sorting
arr = randn(8)
arr.sort()

arr = randn(5, 3)
arr.sort(1)  #Sorting around rows



#######  Methods for Boolean Arrays    ###################
arr = randn(100)
(arr > 0).sum() # Number of positive values

# any tests whether one or more values in an array is True, while all checks if every value is True
bools = np.array([False, False, True, False])
bools.any()
bools.all()




#######  Linear Algebra    ###################

# For 2-D arrays it is equivalent to matrix multiplication, and for 1-D arrays to simple multiplication
x = np.array([[1., 2., 3.], [4., 5., 6.]])
y = np.array([[6., 23.], [-1, 7], [8, 9]])
x.dot(y) # equivalently np.dot(x, y)

#A matrix product between a 2D array and a suitably sized 1D array results in a 1D array:
np.dot(x, np.ones(3))




